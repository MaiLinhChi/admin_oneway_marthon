import { REQUEST_TYPE, API_ROUTES, VOTER_ACTIONS } from 'src/common/constants';
import QueryString from 'query-string';
import axios from 'axios';
import { Promise } from 'q';

export default class TomoFinance {
  /**
   * user login
   */
  static async authenticate(username, password) {
    const data = {
      username,
      password,
    };
    const apiUrl = '/admin/authenticate';
    return this.fetchData(apiUrl, REQUEST_TYPE.POST, null, data);
  }

  /**
   * user login
   */
  static async changePassword(oldPassword, newPassword) {
    const data = {
      oldPassword,
      newPassword
    };

    const apiUrl = '/admin/password';
    return this.fetchData(apiUrl, REQUEST_TYPE.PUT, null, data);
  }

  /**
   * Get deposit, generate, payback, withdraw history
   */
  static historyCDP (apiUrl, user, fromDate, toDate, limit = 20, skip = 0, sort = 'decs' ) {
    const query = {
      user,
      fromDate,
      toDate,
      limit,
      skip,
      sort
    }

    if (user === '') delete query.user;
    if (!fromDate) delete query.fromDate;
    if (!toDate) delete query.toDate;

    return this.fetchData(apiUrl, REQUEST_TYPE.GET, query);
  }

  /**
   * Get vaults
   */
  static getVaults (user, fromDate, toDate, status, limit = 20, skip = 0, sort = 'decs' ) {
    const query = {
      user,
      fromDate,
      toDate,
      status,
      limit,
      skip,
      sort
    }

    if (user === '') delete query.user;
    if (!fromDate) delete query.fromDate;
    if (!toDate) delete query.toDate;

    return this.fetchData(API_ROUTES.VAULTS, REQUEST_TYPE.GET, query);
  }

  static updateVaults (_ids, liquidatedTxHash = '', status = 'liquidated') {
    const body = {
      _ids,
      liquidatedTxHash,
      status
    }
    const apiUrl = '/vaults';
    return this.fetchData(apiUrl, REQUEST_TYPE.PUT, null, body);
  }

  /**
   * action: requestWD, withdraw, requestConfig, config
   */
  static getVotes (action, fromDate, toDate, limit = 0, skip = 0, sort = 'desc') {
    const query = {
      action,
      fromDate,
      toDate,
      limit,
      skip,
      sort
    }

    if (!action) delete query.action;
    if (!fromDate) delete query.fromDate;
    if (!toDate) delete query.toDate;

    const apiUrl = API_ROUTES.GET_VOTES;
    return this.fetchData(apiUrl, REQUEST_TYPE.GET, query)
  }

  /**
   * Request withdraw then waiting 30 minutes to withdraw
   */
  static requestWithdraw (txhash, adminAddress, metaData = {}) {
    const body = {
      txhash,
      adminAddress,
      metaData
    }
    const apiUrl = `${API_ROUTES.POST_VOTES}/${VOTER_ACTIONS.REQUEST_WITHDRAW}`;
    return this.fetchData(apiUrl, REQUEST_TYPE.POST, null, body)
  }

  /**
   * Withdraw rewards which are generated by voting master node
   */
  static withdraw (txhash, adminAddress, metaData = {}) {
    const body = {
      txhash,
      adminAddress,
      metaData
    }
    const apiUrl = `${API_ROUTES.POST_VOTES}/${VOTER_ACTIONS.WITHDRAW}`;
    return this.fetchData(apiUrl, REQUEST_TYPE.POST, null, body)
  }

  /**
   * Request config then waiting 30 minutes to change addresses which will be received rewards
   */
  static requestConfigAddress (txhash, adminAddress, metaData = {}) {
    const body = {
      txhash,
      adminAddress,
      metaData
    }
    const apiUrl = `${API_ROUTES.POST_VOTES}/${VOTER_ACTIONS.REQUEST_CONFIG}`;
    return this.fetchData(apiUrl, REQUEST_TYPE.POST, null, body)
  }

  /**
   * Change config(address30, address70)
   */
  static configAddress (txhash, adminAddress, metaData = {}) {
    const body = {
      txhash,
      adminAddress,
      metaData
    }
    const apiUrl = `${API_ROUTES.POST_VOTES}/${VOTER_ACTIONS.CONFIG}`;
    return this.fetchData(apiUrl, REQUEST_TYPE.POST, null, body)
  }

  /**
   * get setting configuration (addresses of smart contracts)
   */
  static getConfig(key = 'contract') {
    const apiUrl = '/config/' + key;
    return this.fetchData(apiUrl, REQUEST_TYPE.GET);
  }

  static updateConfig(key, data) {
    const body = { key, data };
    const apiUrl = '/config';
    return this.fetchData(apiUrl, REQUEST_TYPE.PUT, null, body);
  }

  static getAnnoucementById(id) {
    const apiUrl = '/notify/' + id;
    return this.fetchData(apiUrl, REQUEST_TYPE.GET);
  }

  static postAnnouncement(message, startDate, endDate) {
    const body = {
      message,
      startDate,
      endDate
    }
    const apiUrl = '/admin/notify';
    return this.fetchData(apiUrl, REQUEST_TYPE.POST, null, body);
  }

  static updateAnnouncement(id, message, startDate, endDate, status) {
    const body = {
      id,
      message,
      startDate,
      endDate,
      status
    }
    const apiUrl = '/admin/notify';
    return this.fetchData(apiUrl, REQUEST_TYPE.PUT, null, body);
  }

  static getAnnoucement(limit = 10, skip, sort = 'desc') {
    const query = {
      limit, skip, sort
    }
    const apiUrl = '/notify';
    return this.fetchData(apiUrl, REQUEST_TYPE.GET, query);
  }

  // POST Governance
  static postGovernance(id = null, txhash, governanceId, title, timeStart, timeEnd, shortDecription, content, minTFI, requireTFI, yesChoose = 0, noChoose = 0, voteCount = 0, type, voters = [], metaData = {}) {
    const body = {
      txhash,
      governanceId,
      title,
      timeStart,
      timeEnd,
      shortDecription,
      content,
      minTFI,
      requireTFI,
      yesChoose,
      noChoose,
      voteCount,
      type,
      voters,
      metaData
    }
    const bodyPUT = {
      timeEnd,
      title,
      shortDecription,
      content,
      requireTFI,
      type
    }
    const apiUrl = id ? '/governance/' + id : '/governance' ;
    return this.fetchData(apiUrl, id ? REQUEST_TYPE.PUT : REQUEST_TYPE.POST, null, id ? bodyPUT : body);
  }

  // GET Governance
  static getGovernance (txhash = "", governanceId = "", fromDate = "", toDate = "", limit = 0, skip = 0, sort = 'desc') {
    const query = {
      txhash,
      governanceId,
      fromDate,
      toDate,
      limit,
      skip,
      sort
    }

    if (!txhash) delete query.txhash;
    if (!governanceId) delete query.governanceId;
    if (!fromDate) delete query.fromDate;
    if (!toDate) delete query.toDate;

    const apiUrl = '/governance';
    return this.fetchData(apiUrl, REQUEST_TYPE.GET, query)
  }

  // GET Governance by ID
  static getGovernanceById(id) {
    const apiUrl = '/governance/' + id;
    return this.fetchData(apiUrl, REQUEST_TYPE.GET);
  }

  static getStakingHistory(user, fromDate, toDate, action = null, limit = 10, skip, sort = 'desc') {
    const query = {
      fromDate, toDate, limit, skip, sort
    }
    if (user) {
      query['user'] = user
    }
    if (action) {
      query['action'] = action
    }
    const apiUrl = '/stakes';
    return this.fetchData(apiUrl, REQUEST_TYPE.GET, query);
  }

  static fetchData(apiUrl, method, queryBody, postData) {
    return new Promise(async (resolve, reject) => {
      let queryStr = '';
      if (queryBody) {
        queryStr = '?' + QueryString.stringify(queryBody);
      }
      queryStr = queryStr.replace('%25', '%');

      const params = {
        baseURL: process.env.REACT_APP_API_APP,
        method: method || REQUEST_TYPE.GET,
        url: apiUrl + queryStr,
      };

      if (postData) {
        params.data = postData;
      }

      let auth = localStorage.getItem('userAuth');
      if (auth) {
        auth = `Bearer ${JSON.parse(auth).token}`;
        params.headers = {
          Authorization: auth,
        };
      }

      axios(params)
        .then(function (response) {
          // handle success
          if (response.status >= 200 && response.status < 300) {
            return resolve(response.data);
          } else {
            return resolve(null);
          }
        })
        .catch(function (error) {
          // handle error
          console.log(error);
          return reject(error);
        });
    });
  }
}
